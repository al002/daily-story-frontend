name: Deploy to VPS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  NEXT_PUBLIC_API_BASE_URL: ${{ secrets.NEXT_PUBLIC_API_BASE_URL }}
  DEPLOY_PATH: /var/www/daily-story-frontend

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment package
        run: |
          # 只需要打包源码和配置文件
          tar -czf deploy.tar.gz \
            src/ \
            public/ \
            package.json \
            pnpm-lock.yaml \
            next.config.ts \
            tsconfig.json \
            postcss.config.mjs \
            Dockerfile \
            .dockerignore

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            mkdir -p ${{ env.DEPLOY_PATH }}
            rm -rf ${{ env.DEPLOY_PATH }}/*

      - name: Copy files to VPS
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "deploy.tar.gz"
          target: ${{ env.DEPLOY_PATH }}

      - name: Build and run on VPS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          envs: NEXT_PUBLIC_API_BASE_URL
          script: |
            cd ${{ env.DEPLOY_PATH }}
            
            tar -xzf deploy.tar.gz
            rm -rf deploy.tar.gz
            
            docker build \
              --build-arg NEXT_PUBLIC_API_BASE_URL="${NEXT_PUBLIC_API_BASE_URL}" \
              -t daily-story-frontend:latest .
            
            docker stop daily-story-frontend || true
            docker rm daily-story-frontend || true
            
            docker run -d \
              --name daily-story-frontend \
              --network storynet \
              --restart unless-stopped \
              -p 127.0.0.1:3000:3000 \
              -e NEXT_PUBLIC_API_BASE_URL="${NEXT_PUBLIC_API_BASE_URL}" \
              daily-story-frontend:latest
            
            docker image prune -f
            docker builder prune -f
