name: Deploy to VPS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  NEXT_PUBLIC_API_BASE_URL: ${{ secrets.NEXT_PUBLIC_API_BASE_URL }}
  DEPLOY_PATH: /var/www/daily-story-frontend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build
        env:
          NEXT_PUBLIC_API_BASE_URL: ${{ env.NEXT_PUBLIC_API_BASE_URL }}

      - name: Create deployment package
        run: |
          # 创建部署包目录
          mkdir -p deploy/
          
          # 复制必要文件
          cp -r .next deploy/
          cp -r public deploy/
          cp package.json deploy/
          cp pnpm-lock.yaml deploy/
          cp next.config.ts deploy/
          
          # 复制 Docker 相关文件
          cp Dockerfile deploy/
          cp .dockerignore deploy/
          
          # 创建压缩包
          tar -czf deploy.tar.gz deploy/

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            # 创建部署目录（如果不存在）
            mkdir -p ${{ env.DEPLOY_PATH }}
            
            # 清理旧的部署文件
            rm -rf ${{ env.DEPLOY_PATH }}/*

      - name: Copy files to VPS
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "deploy.tar.gz"
          target: ${{ env.DEPLOY_PATH }}

      - name: Build and run on VPS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          envs: NEXT_PUBLIC_API_BASE_URL
          script: |
            cd ${{ env.DEPLOY_PATH }}
            
            # 解压部署包
            tar -xzf deploy.tar.gz
            mv deploy/* .
            rm -rf deploy deploy.tar.gz
            
            # 构建 Docker 镜像（构建时传入环境变量）
            docker build \
              --build-arg NEXT_PUBLIC_API_BASE_URL="${NEXT_PUBLIC_API_BASE_URL}" \
              -t daily-story-frontend:latest .
            
            # 停止并删除旧容器
            docker stop daily-story-frontend || true
            docker rm daily-story-frontend || true
            
            # 运行新容器（运行时传入环境变量）
            docker run -d \
              --name daily-story-frontend \
              --restart unless-stopped \
              -p 3000:3000 \
              -e NEXT_PUBLIC_API_BASE_URL="${NEXT_PUBLIC_API_BASE_URL}" \
              daily-story-frontend:latest
            
            # 清理未使用的镜像和构建缓存
            docker image prune -f
            docker builder prune -f
